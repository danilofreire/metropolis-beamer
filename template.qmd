---
title: Metropolis Beamer Theme for Revealjs
subtitle: A theme inspired by [beamer metropolis theme](https://www.overleaf.com/latex/templates/metropolis-beamer-theme/qzyvdhrntfmr)
date: last-modified
date-format: "MMMM DD, YYYY"
author:
  - name: Danilo Freire
    orcid: 0000-0002-4712-6810
    email: danilo.freire@emory.edu
    affiliations: Emory University
format: 
  metropolis-beamer-revealjs: 
    theme: style.scss
    self-contained: true
header-logo: images/rstudio.png
header-logo-link: "https://www.rstudio.com/"
slide-number: "c/t"
embed-resources: true
bibliography: references.bib
transition: slide
transition-speed: default
scrollable: true
engine: knitr
editor:
  render-on-save: true
---

# Components 

## Components

### Alert and Example Inline style

To emphasize specific words or text, you can:

- Use the default `.alert` class, e.g. [important note]{.alert}.
- Use the default `.example` class e.g. [For example, look at this text]{.example}

## Components

### Custom Inline Color Attributes

- Use inline `color` and `bg` attribute for custom color and background color, 
    - `[colored text]{color="#2a74f5"}` produce [colored text]{color="#2a74f5"}
    - `[text with background color]{bg="#f5e347"}` produce [text with background color]{bg="#f5e347"}
    - `[colored text with background]{color="#2a74f5" bg="#f5e347"}` produce [colored text]{color="#2a74f5" bg="#f5e347"}
- [Note that, when using inline attributes, DO NOT PUT SPACE on either side of equal (`=`) sign, that, write like `color="#2a74f5"`, instead of `color = "#2a74f5"`]{.alert}

## Components

### Blockquotes, small fonts and asides

> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam vel rhoncus ante. Donec vitae euismod nibh. In ultrices vestibulum erat, non maximus orci elementum in. Ut eget erat et felis consequat volutpat. Donec ac iaculis justo. Phasellus vitae mi tempor leo scelerisque consequat sed at nibh. 

<br>

::: {style="font-size: 16px;"}
This line uses a smaller font in a `<div>` environment.
:::

::: aside
Some additional commentary of more peripheral interest.
:::

## Components

### Citations

1. @R-knitr

2. @R-rmarkdown

3. @R-quarto 

# Callout Blocks

## Custom Blocks

There are three custom blocks that you can use. Create them using `.callout` class in a div (`:::`) and specify the type.

- For default block, use `type='default'`

- For alert block, use `type='alert'`

- For example block, use `type='example'`

## Default block

```{.markdown}
::: {.callout type='default'}
## Default block

This is a default block
:::
```

renders to,

::: {.callout type='default'}
## Default block

This is a default block
:::

## Alert Block

```{.markdown}
::: {.callout type='alert'}
## Alert Block

This is a alert block
:::
```

renders to, 

::: {.callout type='alert'}
## Alert Block

This is a alert block
:::


## Example Block

```{.markdown}
::: {.callout type='example'}
## Example Block

This is a example block
:::
```

renders to,

::: {.callout type='example'}
## Example Block

This is a example block
:::



## Tables

| fruit  | price  |
|--------|--------|
| apple  | 2.05   |
| pear   | 1.37   |
| orange | 3.09   |

: Fruit prices {#tbl-markdown tbl-colwidths="[75,25]"}

@tbl-markdown is created using markdown.

## Tables

```{r}
#| label: tbl-co2
#| tbl-cap: Carbon Dioxide Uptake in Grass Plants (Data from R)
knitr::kable(head(CO2))
```

For details of @tbl-co2, check by running `?CO2` in R console.

## Images

![Random Image from Picsum](images/picsum.png)


## Absolute positioning

![](images/picsum.png){.absolute top=200 left=0 width="350" height="300"}
![](images/picsum.png){.absolute top=0 right=0 width="350" height="300"}

## Slide with a pause

content before the pause

. . .

content after the pause

## Text that will fit the slide

::: {.r-fit-text}
Big Text
:::

## {auto-animate=true}

::: {style="margin-top: 100px;"}
Animating content
:::

## {auto-animate=true}

::: {style="margin-top: 200px; font-size: 3em; color: red;"}
Animating content
:::

## Code animations {auto-animate="true"}

```r
# Fill in the spot we created for a plot
output$phonePlot <- renderPlot({
  # Render a barplot
})
```

## Code animations {auto-animate=true}

```r
# Fill in the spot we created for a plot
output$phonePlot <- renderPlot({
  # Render a barplot
  barplot(WorldPhones[,input$region]*1000, 
          main=input$region,
          ylab="Number of Telephones",
          xlab="Year")
})
```

## Fragments

::: {.fragment}
Fade in
:::

::: {.fragment .fade-out}
Fade out
:::

::: {.fragment .highlight-red}
Highlight red
:::

::: {.fragment .fade-in-then-out}
Fade in, then out
:::

::: {.fragment .fade-up}
Slide up while fading in
:::

## References

::: {#refs}
:::

